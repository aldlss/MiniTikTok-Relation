// Code generated by Kitex v0.4.4. DO NOT EDIT.

package relationservice

import (
	"context"
	"fmt"
	relation "github.com/aldlss/MiniTikTok-Social-Module/app/kitex_gen/pb/relation"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*relation.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FollowAction": kitex.NewMethodInfo(followActionHandler, newFollowActionArgs, newFollowActionResult, false),
		"ListFollow":   kitex.NewMethodInfo(listFollowHandler, newListFollowArgs, newListFollowResult, false),
		"ListFans":     kitex.NewMethodInfo(listFansHandler, newListFansArgs, newListFansResult, false),
		"ListFriends":  kitex.NewMethodInfo(listFriendsHandler, newListFriendsArgs, newListFriendsResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "mini_tiktok.proto.relation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func followActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.FollowActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).FollowAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FollowActionArgs:
		success, err := handler.(relation.RelationService).FollowAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowActionResult)
		realResult.Success = success
	}
	return nil
}
func newFollowActionArgs() interface{} {
	return &FollowActionArgs{}
}

func newFollowActionResult() interface{} {
	return &FollowActionResult{}
}

type FollowActionArgs struct {
	Req *relation.FollowActionRequest
}

func (p *FollowActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.FollowActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FollowActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FollowActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FollowActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FollowActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FollowActionArgs) Unmarshal(in []byte) error {
	msg := new(relation.FollowActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowActionArgs_Req_DEFAULT *relation.FollowActionRequest

func (p *FollowActionArgs) GetReq() *relation.FollowActionRequest {
	if !p.IsSetReq() {
		return FollowActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowActionArgs) IsSetReq() bool {
	return p.Req != nil
}

type FollowActionResult struct {
	Success *relation.FollowActionResponse
}

var FollowActionResult_Success_DEFAULT *relation.FollowActionResponse

func (p *FollowActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.FollowActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FollowActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FollowActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FollowActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FollowActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FollowActionResult) Unmarshal(in []byte) error {
	msg := new(relation.FollowActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowActionResult) GetSuccess() *relation.FollowActionResponse {
	if !p.IsSetSuccess() {
		return FollowActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.FollowActionResponse)
}

func (p *FollowActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func listFollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.ListFollowRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).ListFollow(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListFollowArgs:
		success, err := handler.(relation.RelationService).ListFollow(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListFollowResult)
		realResult.Success = success
	}
	return nil
}
func newListFollowArgs() interface{} {
	return &ListFollowArgs{}
}

func newListFollowResult() interface{} {
	return &ListFollowResult{}
}

type ListFollowArgs struct {
	Req *relation.ListFollowRequest
}

func (p *ListFollowArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.ListFollowRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListFollowArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListFollowArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListFollowArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListFollowArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListFollowArgs) Unmarshal(in []byte) error {
	msg := new(relation.ListFollowRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListFollowArgs_Req_DEFAULT *relation.ListFollowRequest

func (p *ListFollowArgs) GetReq() *relation.ListFollowRequest {
	if !p.IsSetReq() {
		return ListFollowArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListFollowArgs) IsSetReq() bool {
	return p.Req != nil
}

type ListFollowResult struct {
	Success *relation.ListFollowResponse
}

var ListFollowResult_Success_DEFAULT *relation.ListFollowResponse

func (p *ListFollowResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.ListFollowResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListFollowResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListFollowResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListFollowResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListFollowResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListFollowResult) Unmarshal(in []byte) error {
	msg := new(relation.ListFollowResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListFollowResult) GetSuccess() *relation.ListFollowResponse {
	if !p.IsSetSuccess() {
		return ListFollowResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListFollowResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.ListFollowResponse)
}

func (p *ListFollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func listFansHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.ListFansRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).ListFans(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListFansArgs:
		success, err := handler.(relation.RelationService).ListFans(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListFansResult)
		realResult.Success = success
	}
	return nil
}
func newListFansArgs() interface{} {
	return &ListFansArgs{}
}

func newListFansResult() interface{} {
	return &ListFansResult{}
}

type ListFansArgs struct {
	Req *relation.ListFansRequest
}

func (p *ListFansArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.ListFansRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListFansArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListFansArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListFansArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListFansArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListFansArgs) Unmarshal(in []byte) error {
	msg := new(relation.ListFansRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListFansArgs_Req_DEFAULT *relation.ListFansRequest

func (p *ListFansArgs) GetReq() *relation.ListFansRequest {
	if !p.IsSetReq() {
		return ListFansArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListFansArgs) IsSetReq() bool {
	return p.Req != nil
}

type ListFansResult struct {
	Success *relation.ListFansResponse
}

var ListFansResult_Success_DEFAULT *relation.ListFansResponse

func (p *ListFansResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.ListFansResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListFansResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListFansResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListFansResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListFansResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListFansResult) Unmarshal(in []byte) error {
	msg := new(relation.ListFansResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListFansResult) GetSuccess() *relation.ListFansResponse {
	if !p.IsSetSuccess() {
		return ListFansResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListFansResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.ListFansResponse)
}

func (p *ListFansResult) IsSetSuccess() bool {
	return p.Success != nil
}

func listFriendsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.ListFriendsRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).ListFriends(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ListFriendsArgs:
		success, err := handler.(relation.RelationService).ListFriends(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ListFriendsResult)
		realResult.Success = success
	}
	return nil
}
func newListFriendsArgs() interface{} {
	return &ListFriendsArgs{}
}

func newListFriendsResult() interface{} {
	return &ListFriendsResult{}
}

type ListFriendsArgs struct {
	Req *relation.ListFriendsRequest
}

func (p *ListFriendsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.ListFriendsRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ListFriendsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ListFriendsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ListFriendsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ListFriendsArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ListFriendsArgs) Unmarshal(in []byte) error {
	msg := new(relation.ListFriendsRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ListFriendsArgs_Req_DEFAULT *relation.ListFriendsRequest

func (p *ListFriendsArgs) GetReq() *relation.ListFriendsRequest {
	if !p.IsSetReq() {
		return ListFriendsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ListFriendsArgs) IsSetReq() bool {
	return p.Req != nil
}

type ListFriendsResult struct {
	Success *relation.ListFriendsResponse
}

var ListFriendsResult_Success_DEFAULT *relation.ListFriendsResponse

func (p *ListFriendsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.ListFriendsResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ListFriendsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ListFriendsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ListFriendsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ListFriendsResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ListFriendsResult) Unmarshal(in []byte) error {
	msg := new(relation.ListFriendsResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ListFriendsResult) GetSuccess() *relation.ListFriendsResponse {
	if !p.IsSetSuccess() {
		return ListFriendsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ListFriendsResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.ListFriendsResponse)
}

func (p *ListFriendsResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FollowAction(ctx context.Context, Req *relation.FollowActionRequest) (r *relation.FollowActionResponse, err error) {
	var _args FollowActionArgs
	_args.Req = Req
	var _result FollowActionResult
	if err = p.c.Call(ctx, "FollowAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListFollow(ctx context.Context, Req *relation.ListFollowRequest) (r *relation.ListFollowResponse, err error) {
	var _args ListFollowArgs
	_args.Req = Req
	var _result ListFollowResult
	if err = p.c.Call(ctx, "ListFollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListFans(ctx context.Context, Req *relation.ListFansRequest) (r *relation.ListFansResponse, err error) {
	var _args ListFansArgs
	_args.Req = Req
	var _result ListFansResult
	if err = p.c.Call(ctx, "ListFans", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListFriends(ctx context.Context, Req *relation.ListFriendsRequest) (r *relation.ListFriendsResponse, err error) {
	var _args ListFriendsArgs
	_args.Req = Req
	var _result ListFriendsResult
	if err = p.c.Call(ctx, "ListFriends", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
