// Code generated by Kitex v0.4.4. DO NOT EDIT.

package messageservice

import (
	"context"
	"fmt"
	"github.com/aldlss/MiniTikTok-Relation/app/kitex_gen/pb/message"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return messageServiceServiceInfo
}

var messageServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "MessageService"
	handlerType := (*message.MessageService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Action": kitex.NewMethodInfo(actionHandler, newActionArgs, newActionResult, false),
		"Chat":   kitex.NewMethodInfo(chatHandler, newChatArgs, newChatResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "mini_tiktok.proto.message",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func actionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(message.ActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(message.MessageService).Action(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ActionArgs:
		success, err := handler.(message.MessageService).Action(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ActionResult)
		realResult.Success = success
	}
	return nil
}
func newActionArgs() interface{} {
	return &ActionArgs{}
}

func newActionResult() interface{} {
	return &ActionResult{}
}

type ActionArgs struct {
	Req *message.ActionRequest
}

func (p *ActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(message.ActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ActionArgs) Unmarshal(in []byte) error {
	msg := new(message.ActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ActionArgs_Req_DEFAULT *message.ActionRequest

func (p *ActionArgs) GetReq() *message.ActionRequest {
	if !p.IsSetReq() {
		return ActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ActionArgs) IsSetReq() bool {
	return p.Req != nil
}

type ActionResult struct {
	Success *message.ActionResponse
}

var ActionResult_Success_DEFAULT *message.ActionResponse

func (p *ActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(message.ActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ActionResult) Unmarshal(in []byte) error {
	msg := new(message.ActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ActionResult) GetSuccess() *message.ActionResponse {
	if !p.IsSetSuccess() {
		return ActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*message.ActionResponse)
}

func (p *ActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func chatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(message.ChatRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(message.MessageService).Chat(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *ChatArgs:
		success, err := handler.(message.MessageService).Chat(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*ChatResult)
		realResult.Success = success
	}
	return nil
}
func newChatArgs() interface{} {
	return &ChatArgs{}
}

func newChatResult() interface{} {
	return &ChatResult{}
}

type ChatArgs struct {
	Req *message.ChatRequest
}

func (p *ChatArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(message.ChatRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ChatArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ChatArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ChatArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ChatArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ChatArgs) Unmarshal(in []byte) error {
	msg := new(message.ChatRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var ChatArgs_Req_DEFAULT *message.ChatRequest

func (p *ChatArgs) GetReq() *message.ChatRequest {
	if !p.IsSetReq() {
		return ChatArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ChatArgs) IsSetReq() bool {
	return p.Req != nil
}

type ChatResult struct {
	Success *message.ChatResponse
}

var ChatResult_Success_DEFAULT *message.ChatResponse

func (p *ChatResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(message.ChatResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ChatResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ChatResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ChatResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ChatResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ChatResult) Unmarshal(in []byte) error {
	msg := new(message.ChatResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ChatResult) GetSuccess() *message.ChatResponse {
	if !p.IsSetSuccess() {
		return ChatResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ChatResult) SetSuccess(x interface{}) {
	p.Success = x.(*message.ChatResponse)
}

func (p *ChatResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Action(ctx context.Context, Req *message.ActionRequest) (r *message.ActionResponse, err error) {
	var _args ActionArgs
	_args.Req = Req
	var _result ActionResult
	if err = p.c.Call(ctx, "Action", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Chat(ctx context.Context, Req *message.ChatRequest) (r *message.ChatResponse, err error) {
	var _args ChatArgs
	_args.Req = Req
	var _result ChatResult
	if err = p.c.Call(ctx, "Chat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
